--- src/mx/unam/ciencias/icc/ListaEstudiante.java
+++ src/mx/unam/ciencias/icc/ListaEstudiante.java
@@ -1,4 +1,4 @@
-package mx.unam.ciencias.icc;
+ package mx.unam.ciencias.icc;
 
 /**
  * <p>Clase para listas de estudiantes doblemente ligadas.</p>
@@ -30,6 +30,7 @@ public class ListaEstudiante {
         /* Construye un nodo con un elemento. */
         private Nodo(Estudiante elemento) {
             // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -38,6 +39,7 @@ public class ListaEstudiante {
          */
         public Nodo getAnterior() {
             // Aquí va su código.
+            return this.anterior;
         }
 
         /**
@@ -46,6 +48,7 @@ public class ListaEstudiante {
          */
         public Nodo getSiguiente() {
             // Aquí va su código.
+            return this.siguiente;
         }
 
         /**
@@ -54,6 +57,7 @@ public class ListaEstudiante {
          */
         public Estudiante get() {
             // Aquí va su código.
+            return this.elemento;
         }
     }
 
@@ -68,9 +72,16 @@ public class ListaEstudiante {
      * Regresa la longitud de la lista.
      * @return la longitud de la lista, el número de elementos que contiene.
      */
-    public int getLongitud() {
-        // Aquí va su código.
-    }
+      public int getLongitud() {
+
+	return getLongitud(cabeza);
+     }
+
+    private int getLongitud(Nodo n)
+    { 	if( n==null)
+	   return 0;
+    	return 1 + getLongitud(n.siguiente);
+	    }
 
     /**
      * Nos dice si la lista es vacía.
@@ -79,6 +90,7 @@ public class ListaEstudiante {
      */
     public boolean esVacia() {
         // Aquí va su código.
+        return cabeza == null;
     }
 
     /**
@@ -89,6 +101,17 @@ public class ListaEstudiante {
      */
     public void agregaFinal(Estudiante elemento) {
         // Aquí va su código.
+        if(elemento == null)
+            return;
+        Nodo n = new Nodo(elemento);
+        longitud++;
+        if(rabo == null)
+            cabeza = rabo = n;
+        else{
+            rabo.siguiente = n;
+            n.anterior = rabo;
+            rabo = n;
+        }
     }
 
     /**
@@ -99,6 +122,17 @@ public class ListaEstudiante {
      */
     public void agregaInicio(Estudiante elemento) {
         // Aquí va su código.
+        if(elemento == null)
+            return;
+        Nodo n = new Nodo(elemento);
+        longitud++;
+        if(cabeza == null)
+            cabeza = rabo = n;
+        else{
+            cabeza.anterior = n;
+            n.siguiente = cabeza;
+            cabeza = n;
+        }
     }
 
     /**
@@ -115,17 +149,61 @@ public class ListaEstudiante {
      * @param elemento el elemento a insertar. El elemento se inserta únicamente
      *                 si es distinto de <code>null</code>.
      */
-    public void inserta(int i, Estudiante elemento) {
+       public void inserta(int i, Estudiante elemento) {
         // Aquí va su código.
+        if(elemento == null)
+            return;
+       else if(i <= 0){
+            agregaInicio(elemento);}
+       else if(i >= this.longitud){
+            agregaFinal(elemento);}
+    else{
+    Nodo n = new Nodo(elemento);
+    Nodo c = this.inserta(cabeza,i);
+    
+        n.anterior = c;
+        n.siguiente = c.siguiente;
+        c.siguiente.anterior = n;
+        c.siguiente = n;
+        longitud++;
     }
-
+    }
+    private Nodo inserta(Nodo n, int i)
+    {
+	if(i > 1)
+	    {  i--;
+	    	return inserta(n.siguiente,i);
+	    }
+	return n;
+    }
+    	
     /**
      * Elimina un elemento de la lista. Si el elemento no está contenido en la
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
+    
+       private Nodo buscaNodo(Estudiante elemento,Nodo n){
+    	    	if(n==null)
+    	    	    return null;
+    	    	return n.elemento.equals(elemento)?n:buscaNodo(elemento, n.siguiente);
+    	          
+    	        }
     public void elimina(Estudiante elemento) {
         // Aquí va su código.
+        Nodo r = this.buscaNodo(elemento,cabeza);
+
+        if(r == null)
+            return;
+        else if(r.elemento.equals(cabeza.elemento)) {
+            eliminaPrimero();}
+        else  if(r.elemento.equals(rabo.elemento)) {
+            eliminaUltimo();}
+        else {
+        r.anterior.siguiente = r.siguiente;
+        r.siguiente.anterior = r.anterior;
+        longitud--;
+        }
     }
 
     /**
@@ -135,6 +213,19 @@ public class ListaEstudiante {
      */
     public Estudiante eliminaPrimero() {
         // Aquí va su código.
+        if(cabeza == null)
+            return null;
+        Estudiante r = cabeza.elemento;
+        if(longitud == 1){
+            longitud--;
+            cabeza=rabo=null;
+        }
+        else{
+            cabeza = cabeza.siguiente;
+            cabeza.anterior = null;
+            longitud--;
+        }
+        return r;
     }
 
     /**
@@ -144,6 +235,20 @@ public class ListaEstudiante {
      */
     public Estudiante eliminaUltimo() {
         // Aquí va su código.
+        if(rabo == null)
+            return null;
+        Estudiante r = rabo.elemento;
+
+        if(longitud == 1){
+            cabeza = rabo = null;
+            //longitud = 0;
+            longitud--;
+        }else{
+            rabo = rabo.anterior;
+            rabo.siguiente = null;
+            longitud--;
+        }
+        return r;
     }
 
     /**
@@ -152,32 +257,59 @@ public class ListaEstudiante {
      * @return <tt>true</tt> si <tt>elemento</tt> está en la lista,
      *         <tt>false</tt> en otro caso.
      */
-    public boolean contiene(Estudiante elemento) {
-        // Aquí va su código.
+     public boolean contiene(Estudiante elemento) {
+	 return contiene(elemento, cabeza);
+        
+    }
+
+    private boolean contiene(Estudiante elemento,Nodo n)
+    {
+	if(n==null)
+	    return false;
+	return n.elemento.equals(elemento)?true:contiene(elemento,n.siguiente);
     }
 
     /**
      * Regresa la reversa de la lista.
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
-    public ListaEstudiante reversa() {
-        // Aquí va su código.
-    }
+ public ListaEstudiante reversa() {
+        ListaEstudiante r = new ListaEstudiante();
+	 return reversa(rabo,r);
+   }
+
+   private ListaEstudiante reversa(Nodo n,ListaEstudiante r )
+   {
+	if(n==null)
+	    return r;
+       r.agregaFinal(n.elemento);
+	return reversa(n.anterior, r);
+   }
+
 
     /**
      * Regresa una copia de la lista. La copia tiene los mismos elementos que la
      * lista que manda llamar el método, en el mismo orden.
      * @return una copiad de la lista.
      */
-    public ListaEstudiante copia() {
-        // Aquí va su código.
+   public ListaEstudiante copia() {
+     ListaEstudiante r = new ListaEstudiante();
+     return copia(cabeza,r);
     }
+    private ListaEstudiante copia(Nodo n ,ListaEstudiante r)
+    {
+	if(n==null)
+	    return r;
+	r.agregaFinal(n.elemento);
+	return copia(n.siguiente,r);
 
+    }
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
         // Aquí va su código.
+        cabeza = rabo = null;
     }
 
     /**
@@ -187,6 +319,9 @@ public class ListaEstudiante {
      */
     public Estudiante getPrimero() {
         // Aquí va su código.
+        if(cabeza == null)
+            return null;
+        return cabeza.elemento;
     }
 
     /**
@@ -196,6 +331,9 @@ public class ListaEstudiante {
      */
     public Estudiante getUltimo() {
         // Aquí va su código.
+        if(rabo == null)
+            return null;
+        return rabo.elemento;
     }
 
     /**
@@ -205,8 +343,22 @@ public class ListaEstudiante {
      *         <em>i</em> es menor que cero o mayor o igual que el número de
      *         elementos en la lista.
      */
-    public Estudiante get(int i) {
-        // Aquí va su código.
+     public Estudiante get(int i) {
+
+             if(i < 0 || i >= longitud)
+            return null;
+	     int c = 0;
+	     return get(cabeza,i,c);
+    }
+    private Estudiante get(Nodo n, int i, int c)
+    {
+	if(c++ < i){
+	return get(n.siguiente,i,c);
+	}
+	else
+	    {
+	return n.elemento;
+	    }
     }
 
     /**
@@ -216,15 +368,33 @@ public class ListaEstudiante {
      *         no está contenido en la lista.
      */
     public int indiceDe(Estudiante elemento) {
-        // Aquí va su código.
+	int r = -1;
+	return indiceDe(elemento,cabeza,r);
+    }
+    private int indiceDe(Estudiante elemento,Nodo n,int r)
+    {
+	if(n==null)
+	    return -1;
+	r++;
+	return n.elemento.equals(elemento)?r:indiceDe(elemento,n.siguiente,r);
     }
 
     /**
      * Regresa una representación en cadena de la lista.
      * @return una representación en cadena de la lista.
      */
-    public String toString() {
-        // Aquí va su código.
+      public String toString() {
+            if(cabeza == null)
+            return "[]";
+	     String r = "[" + cabeza.elemento.toString();
+	     return toString(cabeza.siguiente,r);
+    }
+    private String toString(Nodo n, String r )
+    {
+	if(n==null)
+	    return r + "]";
+	    r += ", " + n.elemento.toString();
+	    return toString(n.siguiente,r);
     }
 
     /**
@@ -234,7 +404,15 @@ public class ListaEstudiante {
      *         <tt>false</tt> en otro caso.
      */
     public boolean equals(ListaEstudiante lista) {
-        // Aquí va su código.
+	if(lista == null || longitud != lista.longitud)
+	    return false;
+	return equals(cabeza,lista.cabeza);
+	    }
+    private boolean  equals(Nodo n1, Nodo n2 )
+    {
+	if(n1 == null )
+	    return true;
+	return n1.elemento.equals(n2.elemento)?equals(n1.siguiente,n2.siguiente):false;
     }
 
     /**
@@ -243,6 +421,7 @@ public class ListaEstudiante {
      */
     public Nodo getCabeza() {
         // Aquí va su código.
+        return cabeza;
     }
 
     /**
@@ -251,5 +430,11 @@ public class ListaEstudiante {
      */
     public Nodo getRabo() {
         // Aquí va su código.
+        return rabo;
     }
 }
+
+
+	
+	
+	

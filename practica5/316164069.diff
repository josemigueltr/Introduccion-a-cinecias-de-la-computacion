diff --git a/src/mx/unam/ciencias/icc/BaseDeDatos.java b/src/mx/unam/ciencias/icc/BaseDeDatos.java
index d021dfb..06de304 100644
--- a/src/mx/unam/ciencias/icc/BaseDeDatos.java
+++ b/src/mx/unam/ciencias/icc/BaseDeDatos.java
@@ -11,7 +11,7 @@ import java.io.IOException;
  * registros.
  *
  * Las clases que extiendan a BaseDeDatos deben implementar el método {@link
- * #creaRegistro}, que crea un registro en blanco. 
+ * #creaRegistro}, que crea un registro en blanco.
  */
 public abstract class BaseDeDatos {
 
@@ -22,7 +22,8 @@ public abstract class BaseDeDatos {
      * Constructor único.
      */
     public BaseDeDatos() {
-        // Aquí va su código.
+
+        this.registros= new Lista();
     }
 
     /**
@@ -30,7 +31,7 @@ public abstract class BaseDeDatos {
      * @return el número de registros en la base de datos.
      */
     public int getNumRegistros() {
-        // Aquí va su código.
+         return registros.getLongitud();
     }
 
     /**
@@ -39,7 +40,7 @@ public abstract class BaseDeDatos {
      * @return una lista con los registros en la base de datos.
      */
     public Lista getRegistros() {
-        // Aquí va su código.
+        return registros.copia();
     }
 
     /**
@@ -47,7 +48,7 @@ public abstract class BaseDeDatos {
      * @param registro el registro que hay que agregar a la base de datos.
      */
     public void agregaRegistro(Registro registro) {
-        // Aquí va su código.
+       registros.agregaFinal(registro);
     }
 
     /**
@@ -55,14 +56,14 @@ public abstract class BaseDeDatos {
      * @param registro el registro que hay que eliminar de la base de datos.
      */
     public void eliminaRegistro(Registro registro) {
-        // Aquí va su código.
-    }
+       registros.elimina(registro);
+        }
 
     /**
      * Limpia la base de datos.
      */
     public void limpia() {
-        // Aquí va su código.
+        registros.limpia();
     }
 
     /**
@@ -71,8 +72,19 @@ public abstract class BaseDeDatos {
      * @throws IOException si ocurre un error de entrada/salida.
      */
     public void guarda(BufferedWriter out) throws IOException {
-        // Aquí va su código.
-    }
+
+      try{
+          Lista.Nodo n = registros.getCabeza();
+        while(n!=null) {
+                Registro r =(Registro)n.get();
+                r.guarda(out);
+                n=n.getSiguiente();
+        }
+}catch (Exception e) {
+  throw  new IOException();
+
+}
+}
 
     /**
      * Carga los registros de la entrada recibida en la base de datos. Si antes
@@ -82,8 +94,16 @@ public abstract class BaseDeDatos {
      * @throws IOException si ocurre un error de entrada/salida.
      */
     public void carga(BufferedReader in) throws IOException {
-        // Aquí va su código.
-    }
+  try{      registros.limpia();
+        Registro r =creaRegistro();
+        while(r.carga(in)) {
+                agregaRegistro(r);
+                r=creaRegistro();
+        }
+      }catch (Exception e) {
+        throw new IOException();
+      }
+}
 
     /**
      * Busca registros por un campo específico.
@@ -95,8 +115,21 @@ public abstract class BaseDeDatos {
      *         correcta.
      */
     public Lista buscaRegistros(Enum campo, Object valor) {
-        // Aquí va su código.
-    }
+      if(!(campo instanceof CampoEstudiante)) {
+            throw new IllegalArgumentException();
+      }
+else{
+        Lista l = new Lista();
+        Lista.Nodo n = registros.getCabeza();
+        while(n!=null) {
+                Registro r =(Registro)n.get();
+                if(r.caza(campo,valor))
+                        l.agregaFinal(r);
+                        n = n.getSiguiente();
+        }
+        return l;
+      }
+}
 
     /**
      * Crea un registro en blanco.
diff --git a/src/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java b/src/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
index 921ac5b..6b6059a 100644
--- a/src/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
+++ b/src/mx/unam/ciencias/icc/BaseDeDatosEstudiantes.java
@@ -10,6 +10,6 @@ public class BaseDeDatosEstudiantes extends BaseDeDatos {
      * @return un estudiante en blanco.
      */
     @Override public Registro creaRegistro() {
-        // Aquí va su código.
+           return new Estudiante(null,0,0.0,0);
     }
 }
diff --git a/src/mx/unam/ciencias/icc/CampoEstudiante.java b/src/mx/unam/ciencias/icc/CampoEstudiante.java
index 4a8740d..797577d 100644
--- a/src/mx/unam/ciencias/icc/CampoEstudiante.java
+++ b/src/mx/unam/ciencias/icc/CampoEstudiante.java
@@ -20,6 +20,14 @@ public enum CampoEstudiante {
      * @return una representación en cadena del campo.
      */
     @Override public String toString() {
-        // Aquí va su código.
+
+   switch(this) {
+     case NOMBRE: return "Nombre";
+     case CUENTA: return "# Cuenta";
+     case PROMEDIO:return "Promedio";
+     case EDAD: return "Edad";
+default:
+throw new IllegalArgumentException();
+   }
     }
 }
diff --git a/src/mx/unam/ciencias/icc/Estudiante.java b/src/mx/unam/ciencias/icc/Estudiante.java
index d546503..c208499 100644
--- a/src/mx/unam/ciencias/icc/Estudiante.java
+++ b/src/mx/unam/ciencias/icc/Estudiante.java
@@ -34,7 +34,10 @@ public class Estudiante implements Registro {
                       int    cuenta,
                       double promedio,
                       int    edad) {
-        // Aquí va su código.
+                        this.nombre    = nombre;
+                        this.cuenta=cuenta;
+                       this.edad=edad;
+                       this.promedio=promedio;
     }
 
     /**
@@ -42,7 +45,7 @@ public class Estudiante implements Registro {
      * @return el nombre del estudiante.
      */
     public String getNombre() {
-        // Aquí va su código.
+      	return nombre;
     }
 
     /**
@@ -50,7 +53,7 @@ public class Estudiante implements Registro {
      * @param nombre el nuevo nombre del estudiante.
      */
     public void setNombre(String nombre) {
-        // Aquí va su código.
+     this.nombre=nombre;
     }
 
     /**
@@ -58,7 +61,7 @@ public class Estudiante implements Registro {
      * @return el número de cuenta del estudiante.
      */
     public int getCuenta() {
-        // Aquí va su código.
+      return cuenta;
     }
 
     /**
@@ -66,15 +69,16 @@ public class Estudiante implements Registro {
      * @param cuenta el nuevo número de cuenta del estudiante.
      */
     public void setCuenta(int cuenta) {
-        // Aquí va su código.
-    }
+      this.cuenta=cuenta;
+
+          }
 
     /**
      * Regresa el promedio del estudiante.
      * @return el promedio del estudiante.
      */
     public double getPromedio() {
-        // Aquí va su código.
+      return promedio;
     }
 
     /**
@@ -82,7 +86,7 @@ public class Estudiante implements Registro {
      * @param promedio el nuevo promedio del estudiante.
      */
     public void setPromedio(double promedio) {
-        // Aquí va su código.
+      this.promedio=promedio;
     }
 
     /**
@@ -90,24 +94,30 @@ public class Estudiante implements Registro {
      * @return la edad del estudiante.
      */
     public int getEdad() {
-        // Aquí va su código.
-    }
+      return edad;
+      }
 
     /**
      * Define la edad del estudiante.
      * @param edad la nueva edad del estudiante.
      */
     public void setEdad(int edad) {
-        // Aquí va su código.
-    }
+         this.edad=edad;
+
+            }
 
     /**
      * Regresa una representación en cadena del estudiante.
      * @return una representación en cadena del estudiante.
      */
     @Override public String toString() {
-        // Aquí va su código.
-    }
+        String cadena= String.format("Nombre   : %s\n" +
+                                     "Cuenta   : %09d\n" +
+                                     "Promedio : %2.2f\n" +
+                                     "Edad     : %d",this.nombre, this.cuenta, this.promedio, this.edad);
+        return cadena;
+
+}
 
     /**
      * Nos dice si el objeto recibido es un estudiante igual al que manda llamar
@@ -119,19 +129,41 @@ public class Estudiante implements Registro {
      */
     @Override public boolean equals(Object objeto) {
         if (!(objeto instanceof Estudiante))
-            return false;
+                return false;
         Estudiante estudiante = (Estudiante)objeto;
-        // Aquí va su código.
-    }
+        if (estudiante == null)
+                return false;
+
+        if( !this.nombre.equals(estudiante.nombre))
+                return false;
+
+        if(this.cuenta != estudiante.cuenta)
+                return false;
+
+        if(  this.promedio != estudiante.promedio )
+                return false;
+
+        if(this.edad != estudiante.edad)
+                return false;
+        return true;
+
+}
 
     /**
      * Guarda al estudiante en la salida recibida.
      * @param out la salida dónde hay que guardar al estudiante.
      * @throws IOException si un error de entrada/salida ocurre.
      */
-    @Override public void guarda(BufferedWriter out) throws IOException {
-        // Aquí va su código.
-    }
+  @Override public void guarda(BufferedWriter out) throws IOException {
+        try{
+
+                out.write(String.format("%s\t%d\t%2.2f\t%d\n",nombre,cuenta,promedio,edad));
+        }
+        catch(IOException e ) {
+
+                throw new IOException();
+        }
+}
 
     /**
      * Carga al estudiante de la entrada recibida.
@@ -141,9 +173,29 @@ public class Estudiante implements Registro {
      * @throws IOException si un error de entrada/salida ocurre, o si la entrada
      *         recibida no contiene a un estudiante.
      */
-    @Override public boolean carga(BufferedReader in) throws IOException {
-        // Aquí va su código.
-    }
+@Override public boolean carga(BufferedReader in) throws IOException {
+        try{
+                String s = in.readLine();
+                if(s == null) {
+                        return false;
+                }
+                String[] values=s.split("\t");
+
+                if(values.length != 4) {
+                      throw  new IOException();
+                }
+                this.nombre=values[0];
+                this.cuenta =Integer.parseInt(values[1]);
+                this.promedio=Double.parseDouble(values[2]);
+                this.edad=Integer.parseInt(values[3]);
+                return true;
+        } catch (Exception e) {
+                throw new IOException();
+
+        }
+
+}
+
 
     /**
      * Nos dice si el estudiante caza el valor dado en el campo especificado.
@@ -171,7 +223,51 @@ public class Estudiante implements Registro {
      * @throws IllegalArgumentException si el campo no es instancia de
      *         {@link CampoEstudiante}.
      */
-    public boolean caza(Enum campo, Object valor) {
-        // Aquí va su código.
-    }
+  public boolean caza(Enum campo, Object valor) {
+    if(!(campo instanceof CampoEstudiante))
+    throw new IllegalArgumentException();
+CampoEstudiante ce =(CampoEstudiante)campo;
+switch(ce) {
+case NOMBRE: return cazaNombre(valor);
+case CUENTA: return cazaCuenta(valor);
+case PROMEDIO: return cazaPromedio(valor);
+case EDAD: return cazaEdad(valor);
+}
+return true;
+}
+
+private boolean cazaNombre(Object valor){
+if(!(valor instanceof String ))
+    return false;
+String s = (String) valor;
+if(s.isEmpty())
+    return false;
+return nombre.indexOf(s)!=-1;
+}
+
+private boolean cazaCuenta(Object valor){
+if(!(valor instanceof Integer ))
+    return false;
+Integer v =(Integer)valor;
+return cuenta >=v.intValue();
+
+}
+
+
+private boolean cazaPromedio(Object valor){
+if(!(valor instanceof Double ))
+    return false;
+Double v =(Double)valor;
+return promedio >=v.doubleValue();
+
+}
+
+
+private boolean cazaEdad(Object valor){
+if(!(valor instanceof Integer ))
+    return false;
+Integer v =(Integer)valor;
+return edad >=v.intValue();
+
+}
 }
diff --git a/src/mx/unam/ciencias/icc/Lista.java b/src/mx/unam/ciencias/icc/Lista.java
index 5ae6e1e..de04506 100644
--- a/src/mx/unam/ciencias/icc/Lista.java
+++ b/src/mx/unam/ciencias/icc/Lista.java
@@ -28,7 +28,7 @@ public class Lista {
 
         /* Construye un nodo con un elemento. */
         private Nodo(Object elemento) {
-            // Aquí va su código.
+            this.elemento=elemento;
         }
 
         /**
@@ -36,7 +36,7 @@ public class Lista {
          * @return el nodo anterior del nodo.
          */
         public Nodo getAnterior() {
-            // Aquí va su código.
+             return this.anterior;
         }
 
         /**
@@ -44,7 +44,7 @@ public class Lista {
          * @return el nodo siguiente del nodo.
          */
         public Nodo getSiguiente() {
-            // Aquí va su código.
+             return this.siguiente;
         }
 
         /**
@@ -52,7 +52,7 @@ public class Lista {
          * @return el elemento del nodo.
          */
         public Object get() {
-            // Aquí va su código.
+          return elemento;
         }
     }
 
@@ -68,7 +68,7 @@ public class Lista {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+       return longitud;
     }
 
     /**
@@ -77,7 +77,7 @@ public class Lista {
      *         otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+      return cabeza==null;
     }
 
     /**
@@ -88,7 +88,17 @@ public class Lista {
      *         <code>null</code>.
      */
     public void agregaFinal(Object elemento) {
-        // Aquí va su código.
+      if(elemento == null)
+    		          throw new IllegalArgumentException();
+    		      Nodo n = new Nodo(elemento);
+    		         longitud++;
+    		         if(rabo == null)
+    		              cabeza = rabo = n;
+    		          else{
+    		              rabo.siguiente = n;
+    		             n.anterior = rabo;
+    		              rabo = n;
+    		         }
     }
 
     /**
@@ -99,7 +109,17 @@ public class Lista {
      *         <code>null</code>.
      */
     public void agregaInicio(Object elemento) {
-        // Aquí va su código.
+      if(elemento == null)
+         	            throw new IllegalArgumentException();
+         	        Nodo n = new Nodo(elemento);
+         	        longitud++;
+         	        if(cabeza == null)
+         	            cabeza = rabo = n;
+         	        else{
+         	            cabeza.anterior = n;
+         	            n.siguiente = cabeza;
+         	            cabeza = n;
+         	        }
     }
 
     /**
@@ -118,7 +138,23 @@ public class Lista {
      *         <code>null</code>.
      */
     public void inserta(int i, Object elemento) {
-        // Aquí va su código.
+      if(elemento == null)
+          throw new IllegalArgumentException();
+             else if(i <= 0){
+                  agregaInicio(elemento);}
+             else if(i >= this.longitud){
+                  agregaFinal(elemento);}
+          else{
+          Nodo n = new Nodo(elemento);
+              Nodo c = cabeza;
+           while(i-- > 1)
+                  c = c.siguiente;
+              n.anterior = c;
+              n.siguiente = c.siguiente;
+              c.siguiente.anterior = n;
+              c.siguiente = n;
+              longitud++;
+          }
     }
 
     /**
@@ -126,9 +162,37 @@ public class Lista {
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
-    public void elimina(Object elemento) {
-        // Aquí va su código.
-    }
+private Nodo buscaNodo(Object elemento, Nodo n){
+  while(n != null){
+      if(n.elemento.equals(elemento))
+          return n;
+      n = n.siguiente;
+  }
+ return null;
+ }
+
+
+
+public void elimina(Object elemento) {
+        if(cabeza==null){
+                return;}
+        Nodo prueba = cabeza;
+        Nodo r = this.buscaNodo(elemento,prueba);
+
+        if(r==cabeza) {
+                this.eliminaPrimero();
+
+        }
+        else if(r==rabo) {
+                this.eliminaUltimo();
+
+        }
+        else{
+        r.siguiente.anterior=r.anterior;
+        r.anterior.siguiente=r.siguiente;
+        longitud--;
+}
+}
 
     /**
      * Elimina el primer elemento de la lista y lo regresa.
@@ -136,7 +200,20 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object eliminaPrimero() {
-        // Aquí va su código.
+      if(cabeza == null)
+                  throw new NoSuchElementException();
+          Object r = cabeza.elemento;
+             if(longitud == 1){
+                  longitud--;
+                  cabeza=rabo=null;
+              }
+              else{
+                  cabeza = cabeza.siguiente;
+                  cabeza.anterior = null;
+                  longitud--;
+              }
+              return r;
+
     }
 
     /**
@@ -144,9 +221,22 @@ public class Lista {
      * @return el último elemento de la lista antes de eliminarlo.
      * @throws NoSuchElementException si la lista es vacía.
      */
-    public Object eliminaUltimo() {
-        // Aquí va su código.
-    }
+  public Object eliminaUltimo() {
+        if(rabo == null)
+                throw new NoSuchElementException();
+        Object r = rabo.elemento;
+
+        if(longitud == 1) {
+                cabeza = rabo = null;
+                //longitud = 0;
+                longitud--;
+        }else{
+                rabo = rabo.anterior;
+                rabo.siguiente = null;
+                longitud--;
+        }
+        return r;
+}
 
     /**
      * Nos dice si un elemento está en la lista.
@@ -155,7 +245,14 @@ public class Lista {
      *         <tt>false</tt> en otro caso.
      */
     public boolean contiene(Object elemento) {
-        // Aquí va su código.
+      Nodo n = cabeza;
+          	        while(n != null){
+          	            if(n.elemento.equals(elemento))
+          	                return true;
+                      n = n.siguiente;
+          	        }
+          	        return false;
+
     }
 
     /**
@@ -163,7 +260,14 @@ public class Lista {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista reversa() {
-        // Aquí va su código.
+      Lista  r = new Lista();
+      	        Nodo n = rabo;
+      	        while(n != null){
+      	            r.agregaFinal(n.elemento);
+      	            n = n.anterior;
+      	        }
+      	       return r;
+
     }
 
     /**
@@ -172,14 +276,22 @@ public class Lista {
      * @return una copiad de la lista.
      */
     public Lista copia() {
-        // Aquí va su código.
+      Lista r = new Lista();
+            Nodo n = cabeza;
+            while(n != null){
+                r.agregaFinal(n.elemento);
+                n = n.siguiente;
+            }
+            return r;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     public void limpia() {
-        // Aquí va su código.
+
+    	cabeza = rabo = null;
+    	this.longitud=0;
     }
 
     /**
@@ -188,7 +300,10 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object getPrimero() {
-        // Aquí va su código.
+      if(cabeza == null)
+             throw new NoSuchElementException();
+         return cabeza.elemento;
+
     }
 
     /**
@@ -197,7 +312,10 @@ public class Lista {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public Object getUltimo() {
-        // Aquí va su código.
+      if(rabo==null)
+        	   throw new NoSuchElementException();
+           return rabo.elemento;
+
     }
 
     /**
@@ -208,7 +326,14 @@ public class Lista {
      *         igual que el número de elementos en la lista.
      */
     public Object get(int i) {
-        // Aquí va su código.
+      if(i < 0 || i >= longitud)
+                     throw new ExcepcionIndiceInvalido();
+                 Nodo n = cabeza;
+                 int c = 0;
+                 while(c++ < i)
+                     n = n.siguiente;
+                 return n.elemento;
+
     }
 
     /**
@@ -218,7 +343,15 @@ public class Lista {
      *         no está contenido en la lista.
      */
     public int indiceDe(Object elemento) {
-        // Aquí va su código.
+      int r = 0;
+               Nodo n = cabeza;
+               while(n != null){
+                   if(n.elemento.equals(elemento))
+                       return r;
+                   n = n.siguiente;
+                   r++;
+               }
+               return -1;
     }
 
     /**
@@ -226,7 +359,16 @@ public class Lista {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+      if(cabeza == null)
+                 return "[]";
+              String r = "[" + cabeza.elemento.toString();
+               Nodo n = cabeza.siguiente;
+               while(n != null){
+                   r += ", " + n.elemento.toString();
+                   n = n.siguiente;
+               }
+              return r + "]";
+
     }
 
     /**
@@ -235,19 +377,34 @@ public class Lista {
      * @return <tt>true</tt> si la lista es igual al objeto recibido;
      *         <tt>false</tt> en otro caso.
      */
-    @Override public boolean equals(Object objeto) {
+@Override public boolean equals(Object objeto) {
         if (!(objeto instanceof Lista))
-            return false;
+                return false;
+
         Lista lista = (Lista)objeto;
-        // Aquí va su código.
-    }
+        if(lista == null || longitud != lista.longitud)
+                return false;
+
+        Nodo n = cabeza;
+        Nodo n1 = lista.cabeza;
+        while(n!=null) {
+
+                if(n.elemento.equals(n1.elemento))
+                { n=n.siguiente;
+                  n1=n1.siguiente;}
+                else{
+                        return false;
+                }
+        }
+        return true;
+}
 
     /**
      * Regresa el nodo cabeza de la lista.
      * @return el nodo cabeza de la lista.
      */
     public Nodo getCabeza() {
-        // Aquí va su código.
+         return this.cabeza;
     }
 
     /**
@@ -255,6 +412,6 @@ public class Lista {
      * @return el nodo rabo de la lista.
      */
     public Nodo getRabo() {
-        // Aquí va su código.
+         return this.rabo;
     }
 }
